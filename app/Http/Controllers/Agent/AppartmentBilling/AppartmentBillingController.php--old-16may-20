<?php

namespace App\Http\Controllers\Agent\AppartmentBilling;

use Illuminate\Http\Request;

use App\Http\Controllers\Controller;
use App\Models\Agents\Agent;
use App\Models\Properties\Property;
use App\User;
use App\Models\Countries\Country;
use App\Models\States\State;
use App\Models\Cities\City;
use App\Models\ZipCodes\ZipCode;
use Auth;
use Session;
use Illuminate\Support\Facades\Input;
use App\Models\Company_Managment\company_managment;
use App\Models\Agent\AppartmentBilling\AppartmentBilling;
// use Intervention\Image\ImageManagerStatic as Image;
use Illuminate\Support\Facades\Storage;
use DB;
use Carbon\Carbon;



class AppartmentBillingController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }
    public function create()
    {
    		$data['get_property_data'] = Property::all();
    	
    	$data['country']  = Country::pluck('countrysh', 'id');
        // $company_managment = company_managment::pluck("mgt_company","id");
         $company_managment = company_managment::where('adentcompany_id' ,'=', NULL)
         
    
       ->pluck("mgt_company","id");

       $data['get_agents_data'] = Agent::pluck('agentfirstname','id');
      
       $fromDate = Carbon::now()->startOfMonth()->toDateString();
       $tillDate = Carbon::now()->endOfMonth()->toDateString();
       
       $revenueLastMonth = AppartmentBilling::
       whereBetween(DB::raw('date(created_at)'), [$fromDate, $tillDate])->count();

        //  dd($revenueLastMonth);
    	return view('agent.appartment_bill.create', $data ,compact('company_managment','fromDate','tillDate','revenueLastMonth'));
    }

    public function index(Request $request)
    {
    	
        //return view('agent.appartment_bill.create',compact('appartmentbillings'));
    }


    public function store(Request $request)
    { 
        $user_id = Auth::user()->id;
        $property_id = $request['property_id'];
        if($property_id)
        {
            $property_id = $request['property_id'];
        }
        else{
    		$get_property_id = Property::first();
    		$property_id = $get_property_id['id'];
    	}
        $where = array('id' => $property_id);
        
        $agent_id = $request['agent_id'];
        if($agent_id)
        {
            $agent_id = $request['agent_id']; 
        }
        else{
            $get_agent_id = Agent::first();
            $agent_id = $get_agent_id['id'];
        }
        $where = array('id' => $agent_id);
        $input=$request->all();
         $request->validate([
             'moveinno' => 'required',
            'secongage'=>'required',
            'rent'=>'required',
            // 'comission'=>'required',
            'flatrate'=>'required',
            'bonus'=>'required',
            'totaldueto'=>'required',
            // 'duetofirst'=>'required',
            // 'duetosec'=>'required',
            'verifiedby'=>'required',
            'giftcard' => 'required',
            'pono' => 'required',
            'communityname' => 'required',
            'tenantname' => 'required',
            'tenantaddress' => 'sometimes',
            'tenantunit' => 'required',
            'country' => 'required',
            'state' => 'required',
            'city' => 'required',   
            'zip' => 'required',
            'leesestart' => 'required',
            'leeseterms' => 'required',
            'agentnotes' => 'required',
            'file' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'checkboxes' => 'required',
                ]);
               

                    $original_file = $request->file('file');
        
                    $new_name = time().'_'.$original_file->getClientOriginalName();
            
                    // $image = Image::make($original_file)
                    // ->resize(100, 100)
                    // ->encode($original_file->getClientOriginalExtension());
            
                    Storage::disk('local')->putFileAs(
                        'public/images/appartbill/'.$new_name,
                        $original_file,
                        $new_name
                      );
                    //here you can define any directory name whatever you want, if dir is not exist it will created automatically.
                    // Storage::put('public/images/appartbills/' . $new_name, (string)$image->encode('png', 95));
                               // Storage::put('public/images/appartbills/' . $new_name);
                               $arraystr = implode(",",$request->checkboxes);
                               $inputval['checkboxes'] =  $arraystr;
                
        $form_data =array(
        'moveinno' => $request->moveinno,
        'secongage' => $request->secongage,
        'rent' => $request->rent,
        'comission' => $request->comission,
        'flatrate' => $request->flatrate,

        'bonus' => $request->bonus,
        'totaldueto' => $request->totaldueto,
        'duetofirst' => $request->duetofirst,
        'duetosec' => $request->duetosec,
        'verifiedby' => $request->verifiedby,
       
        'giftcard' => $request->giftcard,

        'pono' => $request->pono,
        'communityname' => $request->communityname,
        'tenantname' => $request->tenantname,
        'tenantaddress' => $request->tenantaddress,
        'tenantunit' => $request->tenantunit,
        'country_id' => $request->country,
        'state_id' => $request->state,
        'city_id' => $request->city,
        'zip_id' => $request->zip,
        'leesestart' => $request->leesestart,
        'leeseterms' => $request->leeseterms,
        'agentnotes' => $request->agentnotes,
        'file' => 'images/' . $new_name,
        'user_id' => $user_id,
        'property_id' => $property_id,
        'agent_id' => $agent_id,
        'adminprop' => $inputval['checkboxes']

        );
        //    dd($form_data);
        
        $apbillings = AppartmentBilling::create($form_data);
        Session::flash('success','ApertmentBilling added sucessfully.');
        return redirect('agents/appartmentbilling')->with('success','Appartment Billing added sucessfully.'); 
        //
    }
}
