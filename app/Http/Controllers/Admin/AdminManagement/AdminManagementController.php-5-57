<?php

namespace App\Http\Controllers\Admin\AdminManagement;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Auth;
use Session;
use App\Models\Invoices\Invoice;
use App\Models\Properties\Property;
use App\Models\Countries\Country;
use App\Models\Agents\Agent;
use App\Models\States\State;
use App\Models\Cities\City;
use App\Models\ZipCodes\ZipCode;
use Validator;
use App\Models\Admin\FeeApprovals\FeeApproval;
use App\User;

class AdminManagementController extends Controller
{
	public function __construct()
    {
       $this->middleware('auth');
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    } 
	public function manage_invoices(){   
		 $Invoice=New Invoice();
		 $result = $Invoice->with('inv_property','inv_city_list','inv_country_list','inv_state_list','inv_zipcode_list','users')->paginate(10);
		 $viewData['result']=$result;
        return view('admin/admin_management/manage_invoices',$viewData); 
    }
    public function manage_payments(){
        return view('admin/admin_management/manage_payments');
    }  
    public function approval_screen(){
        return view('admin/admin_management/approval_screen'); 
    }
	 public function feeRecieptScreen(){

        return view('admin/admin_management/feeRecieptScreen'); 
    }
     public function feeholdScreen(){
     
        return view('admin/admin_management/feeholdScreen'); 
    }
     public function admin_approval(Request $request){


        $Invoice = New Invoice();
        $result = $Invoice->with('inv_property','inv_city_list','inv_country_list','inv_state_list','inv_zipcode_list','users','inv_agent')->paginate(10);
        $viewData['result']=$result;
       $user_id =  Auth::user()->id;
        $invoice_id = $request['invoice_id'];
        if($invoice_id){
        $invoice_id = $request['invoice_id'];
        }
        else{
            $get_invoice_id = Invoice::first();
            $invoice_id = $get_invoice_id['id'];
        }
        $where = array('id' => $invoice_id);
        $data['get_invoice_info'] = Invoice::with('inv_property','inv_city_list','inv_country_list','inv_state_list','inv_zipcode_list','users','inv_agent')
        ->where($where)->first();
              // dd($approvalfee);       
        $request->validate(
            [
            'approved' => 'sometimes',
            'rejected' => 'sometimes',
            ]);
        $feeapprovals =  new FeeApproval();
        $feeapprovals->approved = $request->get('approved');
        $feeapprovals->rejected = $request->get('rejected');
        $feeapprovals->save();
        // dd($result);
     
        return view('admin/admin_management/admin_approval',$viewData,$data); 
    }
     public function admin_approval_invoice(Request $request){
     
        $viewData['billingno'] = $billingno;
        $Invoice = New Invoice();
        $result = $Invoice->with('inv_property','inv_city_list','inv_country_list','inv_state_list','inv_zipcode_list','users','inv_agent')->get();
        $viewData['result']=$result;
        $get_agents = Agent::all();
          dd($get_agents);

        $request->validate(
            [
            'approved' => 'sometimes',
            'rejected' => 'sometimes',
            ]);
        $feeapprovals =  new Invoice();
        $feeapprovals->approved = $request->get('approved');
        $feeapprovals->rejected = $request->get('rejected');
        $feeapprovals->save();
        // dd($result);
     
        return view('admin/admin_management/admin_approval',$viewData,$data,compact('feeapprovals','billingno','billingrec')); 
    }
	 public function deposit(){
        return view('admin/admin_management/manage_deposit'); 
    }
    public function detial_feehold(Request $request,$id){

       
       $where = array('id' => $id);
       $get_invoice_info = Invoice::with('inv_property','inv_city_list','inv_country_list','inv_state_list','inv_zipcode_list','users','inv_agent')
        ->where($where)->first();
        // dd($data['get_invoice_info']);
        return response()->json($get_invoice_info);
    }
    public function invstore(Request $request)
    {
          
         $invoice = new Invoice();
        $invoice->property_id = $request->productid;
        $invoice->autopay = null;
        // $invoice->invoice_type = null;
        $invoice->FirstagentId = $request->firstagentid;
        // $invoice->InvoiceHold  = $request->onhold;
        $invoice->FirstAgentCommPercentage = $request->agentcommision;
        $invoice->SecondAgentID = $request->secondagentid;
      $invoice->FiftyFiftySplit = $request->CheckboxGroup1;
      // $invoice->Rent = $request->rent;
      $invoice->Rent = null;
      // $invoice->AdjustCommission = $request->commission;
      $invoice->AdjustCommission = null;
      $invoice->FlatRate = $request->flatrate;
      $invoice->Bonus = $request->bonus;
      $invoice->AmountDueToVKP = $request->totaldue;
      $invoice->DueToFirstAgent = $request->duetofirst;
      $invoice->DueToSecondAgent = $request->duetosecond;
      $invoice->Verifier = $request->verifiedby;
      $invoice->InvoiceMgmtCompID = $request->mgtnamemgtname;
      $invoice->InvoiceMgmtAddress1 = $request->address;
      $invoice->bill_state_id = $request->stateid;
      $invoice->bill_city_id = $request->cityid;
      $invoice->bill_zipcode_id = $request->zipcodeid;
      $invoice->TenantNames = $request->tenantname;
      $invoice->TenantAddresss = $request->taddress;
      $invoice->TenantUnitNo = $request->unit;
      $invoice->LeaseStartDate  =date('Y-m-d H:i:s',strtotime($request->leasestart));
      $invoice->Leaseterm = $request->leaseterm;
      $invoice->invoice_date    =$request->todaydate;

 

       
        
        $invoice->save();
        Session::flash('message','Invoice added sucessfully.');
        return redirect()->back(); 
    }
}
